#!/usr/bin/env bash

# //////////////////////////////////////////////////////////////////////////////
# Define globals
c_reset=$(echo -en '\033[0m')
c_red=$(echo -en '\033[00;31m')
c_lgreen=$(echo -en '\033[01;33m')

custom_bin_path="$(expand_path './bin')"
PATH_add "${custom_bin_path}"

# //////////////////////////////////////////////////////////////////////////////
# Check project dependencies are met
has_dependency_error='false';
dependencies=( 'docker' 'docker-compose' )

for dependency in "${dependencies[@]}"; do
  if ! which "${dependency}" &>/dev/null; then
    echo -en "${c_red}"
    echo -e ">> ERROR: '${dependency}' is missing or not in \$PATH"
    echo -en "${c_reset}"
    has_dependency_error='true'
  fi
done

# load nvm
if [[ -n "${NVM_DIR}" ]]; then
    type nvm >/dev/null 2>&1 || . "${NVM_DIR}/nvm.sh"
    nvm use
else
    echo -en "${c_red}"
    echo -e ">> ERROR: 'nvm' seems to be missing. Ensure that '\$NVM_DIR' is present"
    echo -en "${c_reset}"
    has_dependency_error='true'
fi

 [[ "${has_dependency_error}" == 'true' ]] && echo ''; # inject empty line if there is an dependency error

# //////////////////////////////////////////////////////////////////////////////
# Load global environment variables

    # --> currently nothing to modify

# //////////////////////////////////////////////////////////////////////////////
# Load environment variables
env_files=( './.env' )
loaded_env_files=()

for env_file in "${env_files[@]}"; do
  expanded_env_file="$(expand_path "${env_file}")"
  if [[ -f "${expanded_env_file}" ]]; then
    dotenv "${expanded_env_file}"
    loaded_env_files+=( "${expanded_env_file}" )
  fi
done

if [[ ${#loaded_env_files[@]} -gt 0 ]]; then
  echo -en "${c_lgreen}"
  echo -e  ">> INFO:${c_reset}  environment file(s) loaded in the following order:"
  echo -e  "            ["
  for single_env_file in ${loaded_env_files[*]}; do
    echo -e  "              ${single_env_file}"
  done
  echo -e  "            ]"
fi

# //////////////////////////////////////////////////////////////////////////////
# Load optional user environment files: .env.user*
optional_user_env_files=".env.user*"
optional_loaded_user_env_files=()

for optional_user_env_file in ${optional_user_env_files}; do
  expanded_optional_user_env_file="$(expand_path "${optional_user_env_file}")"

  if [[ -f "${expanded_optional_user_env_file}" ]]; then
    dotenv "${expanded_optional_user_env_file}"
    optional_loaded_user_env_files+=( "${optional_user_env_file}" )
  fi
done

if [[ ${#optional_loaded_user_env_files[@]} -gt 0 ]]; then
  echo -en "${c_lgreen}"
  echo -e  ">> INFO:${c_reset}  optional user environment file(s) loaded in the following order:"
  echo -e  "            ["
  for single_user_env_file in ${optional_loaded_user_env_files[*]}; do
    echo -e  "              ${single_user_env_file}"
  done
  echo -e  "            ]"
fi

echo -en "${c_lgreen}"
echo -e  ">> INFO:${c_reset}  print important environment variables"
echo -e  "        \$VITE_ENVIRONMENT                    = '${VITE_INTEVITE_ENVIRONMENTRNET_IDENTITY_CANISTER_ID:-undefined}'"
echo -e  "        \$VITE_INTERNET_IDENTITY_CANISTER_ID  = '${VITE_INTERNET_IDENTITY_CANISTER_ID:-undefined}'"
echo -e  "        \$NODE_ENV                            = '${NODE_ENV:-undefined}'"
echo -e  "        \$DFX_NETWORK                         = '${DFX_NETWORK:-undefined}'"
echo -e  "        \$VITE_DFX_NETWORK                    = '${VITE_DFX_NETWORK:-undefined}'"
echo -e  "        \$IC_BACKEND_HOST                     = '${IC_BACKEND_HOST:-undefined}'"
echo -e  "        \$VITE_IC_BACKEND_HOST                = '${VITE_IC_BACKEND_HOST:-undefined}'"

# intentionally linebreak
echo


